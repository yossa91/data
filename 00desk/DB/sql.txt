SELECT 테이블.필드명, 테이블.필드명,[A필드명]-[B필드명] AS 필드명작명(*a필드와b필드를 뺀 데이터를 작명한 필드에 넣는다)
							//[A]-[B]AS C   /AS문장-필드명지정(수정시는 ABC AS 필드명)
FROM 테이블
WHERE 필드명 Not In ("A","B") (*a와b를 제외한 데이터를 출력한다)   
WHERE 필드명 = [메세지] (*제품필드에 =[제품명을 입력하세요]라고 입력시 입력 메세지 창이 뜬다, 제품입력시 해당제품 정보만 불러온다)
		         // like "*" & [제품명을 입력하세요] & "*" 시 글자 일부분으로 검색 가능하다





-------
WHERE 거래처명 ="AA"Or 거래처명="BB";
WHERE 거래처명 = In("AA","BB");
WHERE 거래처명 not In("AA","BB");
WHERE 거래처명 like"AA*";  // like'A%'; like'%A%';  // 
WHERE 거래처명 not like"AA*";
-----
추가하기
INSERT INTO 필드명 (제품코드,제품명,생산원가,판매단가)
values("aaa","제품1",3000,6000);
삭제하기
DELETE FROM 필드명
WHERE 제품명 not in("반바지","청바지","면바지");  (*필드내 3가지를 제외하고 지운다)
-----
Filter= "거래처명 ='" & ex거래처명 & "'"      <문자
Filter= "제품명 like '*" & ex제품명 & "*'"    <문자의 일부
Filter= "제품번호=" & 0000    <숫자
------
=left([해당범위],1)="해당문자"  >해당범위 1번째 문자가 해당문자 인것 (left,middle,right)

----
<범위설정>
Me.RecordSource = SELECT * FORM 제품별판매현황 WHERE" & txt수량1 & ">=10and" & txt수량2 & "<=20";
Me.RecordSource = SELECT * FORM 제품별판매현황 WHERE" &txt수량1 & "betwwen 10 and 20";

----
Me.Filter = "판매일 = #" & txt판매일 & "#"    <날자를 숫자로 인식 
Me.RecordSource = "SELECT * FORM 제품별판매현황 WHERE #" & txt판매일1 & "#>=1234 and #" & txt판매일1 & "#<=1123";
Me.RecordSource = "SELECT * FORM 제품별판매현황 WHERE #" & txt판매일1 & "#>=1234 and #" & txt판매일1 & "#<=1123";

----
@"" >문자 데이터 뒤에 문자를 붙일때
0"" >숫자데이터 뒤에 문자를 붙일 때
#,##0"원" / #,##0,"천원" / #,##0,,"백만원"
yy-mm-dd(aaaa) AM/PM h:nn
0.0 (소수점표시)
=[page] & " / " & [pages] & "페이지"

----
배열수식>
=SUMIF($A$1:$B$2,$F3(조건),$C$3:$D$4)
=SUM(IF(배열조건식,값범위) ) 
=LARGE(IF($A$1:$B$2=$C3,$D$4:$E$5),1(번째)) --1번째 큰 수 구하기
=SUM((IF($A$1:$B$2=$C3)*(YEAR($D$4:$E$5)=1999),1))  --해당연도를 포함하는 값을 찾기 SUM대신 COUNT 사용가능

=($B11="bd-002"  )*($D11="김승진"  )


-------------------------------------------------------W3 SQL 
<관계연산
-SELECT DISTINCT 필드명 FROM 테이블네임  (해당 테이블의 필드내 중복이 있는 정보를 중복없이 나열한다)
-SELECT COUNT(DISTINCT 필드명) FORM 테이블네임   (해당 테이블의 필드내 중복이 있는 정보를 중복없이 세어 수로 나타낸다)
-SELECT Count(*) AS 새필드명
 FROM (SELECT DISTINCT 필드명 FROM 테이블네임)  (FORM 안에 중복을 걸러낸 필드의 정보들을 불러올 수도 있다.) 
-SELECT * FROM 테이블네임
 WHERE 필드명="ABC"; (해당 필드명 내 ABC만 골라낸다 / 숫자 역시 가능) 
* = / <> 같지 않다(!=로도 사용) / > / < />= /<= / BETWEEN / LIKE / IN    **WHERE절내 관계 연산자

<논리연산 
-SELECT 폼1, 폼2.... FROM 테이블네임
 WHERE 조건1 AND 조건2 AND 조건3;  (조건1과 2,3 을 만족하는 정보 조회)
 WHERE 조건1 OR 조건2 OR 조건3;  (조건1 혹은 2 ,3 중 하나를 만족하는 정보 조회)
 WHERE NOT 조건;  (NOT 이하의 조건을 제외한 정보를 조회)

**주로 필드가 다른상태에서 2가지 이상의 조건을 검색할 때는,
 WHERE 조건1 AND (조건2 OR 조건3);  (조건2나 3이 중 하나를 포함하며 조건1이 반드시 포함된 정보조회) 
 WHERE NOT 조건1 AND 조건2;  (조건 1과 2를 포함하지 않은 정보조회) 등등 조합하여 검색 가능하다.

**IN의 경우 편리하게 식을 쓸 수 있다
WHERE  NOT Country='Germany' AND NOT Country='USA'; 
WHERE Country NOT IN ('Germany','USA');   (둘은 같은 정보를 찾는다.)

<순차
-SELECT * FROM Customers
 ORDER BY 필드명;   (필드내 정보를 오름차순으로 정렬한다  필드명 뒤 'DESC' 를붙이면 내림차순**)
 ORDER BY 필드명1 ASC, 필드명2 DESC;  (필드1을 오름차순으로 필드명2는 내림차순으로 정보조회)

<삽입
-INSERT INTO 테이블네임 (필드1,필드2,필드5)
 VALUES ('정보1', '정보2', '정보3');   (필드1에 정보1을 필드2에 정보2를 필드5에 정보3을 자동 생성한다 )
**필드수에 맞게 데이터를 전부 넣는다면 INSERT INTO에 테이블 네임만 지정 후 데이터를 삽입하면 된다.
   필드를 지정하지 않은 값은  NULL로 들어간다 ***0과 스페이스는 null값이 아니다
<업데이트
-UPDATE 테이블네임
 SET ContactName = 'Alfred Schmidt', 필드명= '업데이트데이터' (해당 필드명 내에 데이터를 변경한다)
 WHERE CustomerID = 1;  (필드명="지정위치"어느 부분인지 지정 지정이 없다면 해당 필드내 데이터는 모두 변경된다)
ex) UPDATE Customers
     SET ContactName='Juan'
     WHERE Country='Mexico';  (customers 폼 내에 country 필드명 내 mexico 데이터는
			 contactname 필드명 내 데이터를 juan으로 모두 변경한다)

<제거
-DELETE FROM 테이블네임	
 WHERE 조건(필드명="ABC" 해당필드내에 ABC라는 데이터를 가진 줄 전체를 을 삭제한다)
-DELETE * FROM 테이블네임; (해당 테이블을 삭제한다 DELETE FROM 테이블네임; 로도 쓸 수 있다)
 
<순위
-SELECT TOP 3 * FROM 테이블네임;  (상위 3개의 정보출력 WHERE절로 조건을 줄 수도 있다)

<그룹함수
-SELECT MIN(필드네임)
 FROM 테이블네임  (해당 테이블 내에 지정필드의 최소값을 구한다 MAX는 최대값)

-SELECT COUNT(필드명) AS 새 필드명
 FROM 테이블네임
-SELECT AVG(필드명) AS 새 필드명
 FROM 테이블네임
-SELECT SUM(필드명) AS 새 필드명
 FROM 테이블네임  (해당 함수들은 AS로 필드 명을 주어야만이 데이터를 덮어 쓰는 일이 없다)

<검색
-SELECT * FROM 테이블네임
 WHERE 필드명 LIKE 'a%';  (a로 시작하는 정보검색)

**WHERE CustomerName LIKE 'a%'	a로 시작되는 데이터
 WHERE CustomerName LIKE '%a'	a로 끝나는 데이터
 WHERE CustomerName LIKE '%or%'	사이에 or을 포함하는 데이터
 WHERE CustomerName LIKE '_r%'	아무 한글자 후에 r이온 후 아무 문자가 오는 데이터
 WHERE CustomerName LIKE 'a_%_%'	a 이후 한글자 후 아무글자 후 한글자 후 아무글자 가 오는 데이터
 WHERE ContactName LIKE 'a%o'            a로시작 o로 끝나는 데이터
**_ 언더바는 아무글자든 상관없지만 한글자가 고정인 표시이다  **NOT LIKE 는 반대 개념

[유효성 검사에 있어서 InStr([전자우편]," ")=0 AND LIKE "*@*" 
와 같은경우 전자우편 필드내 데이터는 공백을 주지 않으며 @이가 꼭 들어간다 같이 유효성을 확인할 수 있다.
NOT LIKE "* *" AND LIKE "*@*" 와 같이 쓸 수 도 있다]

-SELECT * FROM Customers
 WHERE City LIKE '[bsp]%'; ( [대괄호] 안의 데이터는 가각을 의미한다 LIKE 'b%' AND LIKE 's%' AND LIKE 'p%' 와 같다)

<조인 (1대 N의 관계에서 주로 N에 조인한다)
-SELECT Orders.OrderID, Customers.CustomerName, Orders.OrderDate (조인할 테이블.필드명)
FROM Orders (테이블네임)
INNER JOIN Customers(테이블네임) 
ON Orders.CustomerID=Customers.CustomerID(ON이하 두 테이블의 공통사항);

<sql db
NOT NULL - 필수
ex)CREATE TABLE Persons (
   	 ID int NOT NULL,
  	  LastName varchar(255) NOT NULL,
  	  FirstName varchar(255) NOT NULL,
  	  Age int	);                                        (Age를 제외한 데이터는 필수로 데이터값을 받는다
					+varchar의 경우 그냥char과 달리 가변적으로 값을 받기때문에 지향한다)
UNIQUE - 유일
ex)CREATE TABLE Persons (
  	  ID int NOT NULL UNIQUE,
  	  LastName varchar(255) NOT NULL,
  	  FirstName varchar(255),
   	 Age int   );			(중복되지 않느 유일한 값을 받는다
					옆에 적어도 되지만 문장 바지막에 UNIQUE (ID) 로도 작성가능)
- ALTER TABLE Persons
   ADD UNIQUE (ID);     		( 이미 만들어진 테이블에 해당 제약을 추가 할 수도 있다)

<KEY
<복합키 PRIMARY KEY
ex)CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    PRIMARY KEY (ID)   );       	(or ID int NOT NULL PRIMARY KEY,  로 작성 가능)
-ALTER TABLE Persons
 ADD PRIMARY KEY (ID); 	(이미 만들어진 테이블에 추가 지정가능)
 
<외래키 PRIMARY KEY : 외래키는 1대 N에서 필히 N에서 제작되며 어느 테이블을 참조하는지 (REFERENCES) 적어주어야 한다
ex)CREATE TABLE Orders (
    	OrderID int NOT NULL,
   	OrderN	umber int NOT NULL,
  	PersonID int,
  	PRIMARY KEY (OrderID),
    	FOREIGN KEY (PersonID) REFERENCES Persons(PersonID)  );
=  CREATE TABLE Orders (
    	OrderID int NOT NULL PRIMARY KEY,
    	OrderNumber int NOT NULL,
    	PersonID int FOREIGN KEY REFERENCES Persons(PersonID)   ); 와 같이 바로 옆에 적을 수도 있다

<VIEW : VIEW에는 ALTER 기능이 없다















